#!/usr/bin/env node

import { promises as fs } from 'fs';
import https from "https";
import path from "path";
import childProcess from "child_process";
import { exit } from "process";
const __dirname = import.meta.dirname;

process.env["PATH"] += path.delimiter + __dirname + path.sep + "bin"
process.env["CARGO_MANIFEST_DIR"] = __dirname;

// Windows binaries end with .exe so we need to special case them.
const binaryName = "jstzd";

function getBinaryPath() {
  try {
    // Resolving will fail if the optionalDependency was not installed
    return require.resolve(`${binaryName}`);
  } catch (e) {
    return path.join(__dirname, "bin", binaryName);
  }
}


// Compute the path we want to emit the fallback binary to
const fallbackBinaryPath = path.join(__dirname, "bin", binaryName);

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    https
      .get(url, (response) => {
        if (response.statusCode >= 200 && response.statusCode < 300) {
          const chunks = [];
          response.on("data", (chunk) => chunks.push(chunk));
          response.on("end", () => {
            resolve(Buffer.concat(chunks));
          });
        } else if (
          response.statusCode >= 300 &&
          response.statusCode < 400 &&
          response.headers.location
        ) {
          // Follow redirects
          makeRequest(response.headers.location).then(resolve, reject);
        } else {
          reject(
            new Error(
              `npm responded with status code ${response.statusCode} when downloading the package!`
            )
          );
        }
      })
      .on("error", (error) => {
        reject(error);
      });
  });
}

async function downloadBin(url, dst) {
  const downloadBuffer = await makeRequest(url);

  // Extract binary from package and write to disk
  await fs.writeFile(
    dst,
    downloadBuffer
  );

  // Make binary executable
  await fs.chmod(dst, "755");
}

async function downloadBinaryFromNpm() {
  console.log("downloading required binaries");
  await fs.mkdir(path.join(__dirname, "bin"));
  // Download the tarball of the right binary distribution package
  childProcess.execFileSync("bash", [path.join(__dirname, "./zcash.sh")], {stdio: "ignore"});
  childProcess.execFileSync("unzip", ["-o", path.join(__dirname, "./out.zip"), "-d", "/usr/share/jstz"], {stdio: "ignore"});
  try { 
    await downloadBin("https://gitlab.com/tezos/tezos/-/package_files/150896414/download", "/usr/local/bin/octez-node");
    await downloadBin("https://github.com/huancheng-trili/jstzd-bin/raw/f2ff65679cab2e2f933de55052b5a715f3e1cba9/jstzd", fallbackBinaryPath);
    await downloadBin("https://github.com/huancheng-trili/jstzd-bin/raw/f2ff65679cab2e2f933de55052b5a715f3e1cba9/jstz", path.join(__dirname, "bin", "jstz"));
    await downloadBin("https://gitlab.com/tezos/tezos/-/package_files/150896298/download", "/usr/local/bin/octez-client");
    await downloadBin("https://gitlab.com/tezos/tezos/-/package_files/150896463/download", "/usr/local/bin/octez-baker-PsParisC");
    await downloadBin("https://gitlab.com/tezos/tezos/-/package_files/150896095/download", "/usr/local/bin/octez-smart-rollup-node");
  } catch (e) {
    console.error("download failed :(", e);
    await fs.rmdir(path.join(__dirname, "bin"), { recursive: true, force: true });
    throw e;
  }
  await fs.copyFile(path.join(__dirname, "bin", "jstz"), "/usr/local/bin/jstz");
}

try {
  await fs.access(getBinaryPath());
} catch {
  await downloadBinaryFromNpm();
}

try {
  childProcess.execFileSync(getBinaryPath(), process.argv.slice(2), {
    stdio: "inherit",
  });
} catch (e) {
  if (e.code) {
    exit(1);
  } else {
    exit(e.status);
  }
}
